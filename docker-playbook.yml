---
- hosts: docker
  remote_user: '{{ remote_user }}'
  become: true
  tasks:
    - name: Only allow incoming traffic from trusted networks
      ufw: rule=allow src={{ item }} state=enabled
      with_items: "{{ trusted_networks }}"
    - name: Set hostname to fqdn
      hostname: name='{{ inventory_hostname }}'
    - name: Dont bind hostname to loopback
      replace: dest=/etc/hosts regexp='^127.0.1.1 .*$' replace='' backup=yes
    - name: Set locale
      blockinfile:
        dest: /etc/environment
        block: |
          LC_ALL="en_US.utf-8"
    - name: Remove puppet and chef
      apt: name={{ item }} state=absent
      with_items:
        - puppet
        - chef
    - name: Check if packages need to be autoremoved
      command: apt-get --dry-run autoremove
      register: check_autoremove
      changed_when: False
    - name: Autoremove unused packages
      command: apt-get -y autoremove
      when: "'packages will be REMOVED' in check_autoremove.stdout"
    - name: Docker repo key
      apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D
    - name: Docker repo
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main'
    - name: Update apt cache
      apt: update_cache=yes
    - name: Install reboot notifier
      apt: name=update-notifier-common
    - name: Upgrade APT to the lastest packages
      apt: upgrade=full
    - name: Docker
      apt: name=docker-engine
    - name: NTP
      apt: name=ntp
    - name: pip
      apt: name=python-pip
    - name: docker-py
      pip: name=docker-py
    - name: Posix users which can use docker
      user: user={{ item.name }} group=users groups=docker shell=/bin/bash uid={{ item.uid }} password='{{ item.password }}'
      with_items: "{{ users }}"
    - name: Set docker tcp
      blockinfile:
        dest: /etc/default/docker
        block: |
          DOCKER_OPTS="-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock"
    - name: Docker
      service: name=docker state=started
    - name: NFS client
      apt: name=nfs-client
    - name: Shelly stuff
      file: name=/shelly state=directory
    - name: HDFS mountpoint
      file: name=/shelly/data state=directory
    - name: Mount HDFS with NFS
      mount: name=/shelly/data src='{{ nfs_server }}.{{ ansible_domain }}:/' state=mounted fstype=nfs opts=vers=3,proto=tcp,nolock
    - name: Hadoop/spark config dir
      file: name=/shelly/config state=directory
    - name: Hadoop config 2 local
      copy: src=shelly-conf/hadoop/{{ item }} dest=/shelly/config/
      with_items:
        - capacity-scheduler.xml
        - core-site.xml
        - hadoop-env.sh
        - hdfs-site.xml
        - log4j.properties
        - yarn-env.sh
        - yarn-site.xml
        - topology_mappings.data
        - topology_script.py
    - name: Spark config 2 local
      copy: src=shelly-conf/spark/{{ item }} dest=/shelly/config/
      with_items:
        - spark-defaults.conf
        - spark-env.sh
    - name: spark-metrics.properties 2 machine
      copy: src=shelly-conf/spark/metrics.properties dest=/shelly/config/metrics.properties
    - name: spark-log4j.properties 2 machine
      copy: src=shelly-conf/spark/log4j.properties dest=/shelly/config/spark-log4j.properties
    - name: Disable JAVA_HOME
      lineinfile: dest=/shelly/config/{{ item }} regexp='export JAVA_HOME=/usr/lib/jvm/java-8-oracle' line='#export JAVA_HOME=/usr/lib/jvm/java-8-oracle'
      with_items:
        - hadoop-env.sh
        - yarn-env.sh
        - spark-env.sh
    - name: hdp version
      blockinfile:
        dest: /shelly/config/spark-defaults.conf
        block: |
          spark.driver.extraJavaOptions -Dhdp.version={{ hdp_version }}
          spark.yarn.am.extraJavaOptions -Dhdp.version={{ hdp_version }}
    - name: Disble topology_script
      blockinfile:
        dest: /shelly/config/core-site.xml
        state: absent
        block: |
          <property>
            <name>net.topology.script.file.name</name>
            <value>/etc/hadoop/conf/topology_script.py</value>
          </property>
- hosts: docker-manager
  remote_user: '{{ remote_user }}'
  become: true
  tasks:
    - name: Swarm config dir
      file: name=/etc/docker-swarm state=directory
    - name: Nodes of swarm
      template: src=swarm.hosts.j2 dest=/etc/docker-swarm/hosts
    - name: swarm manage
      docker:
        name: swarm-manage
        image:  swarm
        state: started
        command: manage -H :4000 --advertise {{ ansible_fqdn }}:4000 file:///etc/docker-swarm/hosts
        expose:
          - 4000
        ports:
          - 4000:4000
        volumes:
          - /etc/docker-swarm:/etc/docker-swarm
